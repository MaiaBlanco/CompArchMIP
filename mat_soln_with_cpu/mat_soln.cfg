# (probably?) used by Gem5-Aladdin
ready_mode,0
# Used by aladdin:

# For SPAD and ACP mapped, 256x256 float arrays: 
#acp,A,4
#partition,block,I,262144,4,1

# SPAD Mapped Everything
partition,cyclic,A,1024,4,16
partition,cyclic,b,64,4
partition,cyclic,x,64,4

# For CACHE-mapped, 128x128 float array: 
#cache,A,65536,4
#cache,I,65536,4

# For CACHE-mapped, 16x16 float array:
#cache,A,1024,4
#cache,I,1024,4

# Loop unrolling and pipelining:
# loops can be unrolled, pipelined, or flattened. Ex:
# flatten,function_name,loop_label
# unrolling,function_name,loop_label,factor
# pipeline,function_name,loop_label
unrolling,mat_soln,norm_cols,16
unrolling,mat_soln,sub_cols,16
pipeline,mat_soln,norm_cols
unrolling,mat_soln,setup_loop,16
cycle_time,10

# instead of partitioning an array (which means it is transferred to-from accel 
# scratchpad (spad) using DMA, it is possible to use directives like the following:
# acp,A,400,4
# ^   ^  ^  ^
# |   |  |  =- size of each data entry (float = 4 bytes)
# |   |  =---- size of array (number of bytes) # TODO: Based on test_acp this may not be needed...!
# |   =------- The array in question
# =----------- use acp or cache here
#
# ACP means application coherence port, which means the data is copied but modified in a 
# memory-coherent fashing
# cache means that the memory is accessed from cache. AFAIK this does not mean a separate
# cache is created but instead that the accelerator uses the core's L1 cache for data
# Partitioning options (for scratchpad) are block, cyclic, and complete (same as Xilinx's 
# documentation.
